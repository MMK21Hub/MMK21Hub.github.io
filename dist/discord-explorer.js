(()=>{"use strict";var r={394:(r,e,n)=>{n.d(e,{Z:()=>A});var t=n(15),a=n.n(t),o=n(645),i=n.n(o)()(a());i.push([r.id,'.discord-view{--header-primary: #fff;--header-secondary: #b9bbbe;--text-normal: #dcddde;--text-muted: #72767d;--text-link: #00b0f4;--channels-default: #8e9297;--interactive-normal: #b9bbbe;--interactive-hover: #dcddde;--interactive-active: #fff;--interactive-muted: #4f545c;--background-primary: #36393f;--background-secondary: #2f3136;--background-secondary-alt: #292b2f;--background-tertiary: #202225;--background-accent: #4f545c;--background-floating: #18191c;--background-mobile-primary: #36393f;--background-mobile-secondary: #2f3136;--background-modifier-hover: rgba(79, 84, 92, 0.16);--background-modifier-active: rgba(79, 84, 92, 0.24);--background-modifier-selected: rgba(79, 84, 92, 0.32);--background-modifier-accent: hsla(0, 0%, 100%, 0.06);--background-mentioned: rgba(250, 166, 26, 0.05);--background-mentioned-hover: rgba(250, 166, 26, 0.08);--background-message-hover: rgba(4, 4, 5, 0.07);--background-help-warning: rgba(250, 166, 26, 0.1);--background-help-info: rgba(0, 176, 244, 0.1);--scrollbar-thin-thumb: #202225;--scrollbar-thin-track: transparent;--scrollbar-auto-thumb: #202225;--scrollbar-auto-track: #2e3338;--scrollbar-auto-scrollbar-color-thumb: #202225;--scrollbar-auto-scrollbar-color-track: #2f3136;--elevation-stroke: 0 0 0 1px rgba(4, 4, 5, 0.15);--elevation-low: 0 1px 0 rgba(4, 4, 5, 0.2), 0 1.5px 0 rgba(6, 6, 7, 0.05), 0 2px 0 rgba(4, 4, 5, 0.05);--elevation-medium: 0 4px 4px rgba(0, 0, 0, 0.16);--elevation-high: 0 8px 16px rgba(0, 0, 0, 0.24);--logo-primary: #fff;--focus-primary: #00b0f4;--radio-group-dot-foreground: #8ea1e1;--guild-header-text-shadow: 0 1px 1px rgba(0, 0, 0, 0.4);--channeltextarea-background: #40444b;--activity-card-background: #202225;--textbox-markdown-syntax: #8e9297}main{padding-top:64px;padding-left:8px}html,body{height:100%}body{margin:0;font-family:"Roboto",Ubuntu,"Segoe UI",sans-serif}#inner-box{display:grid;grid-template-columns:240px auto;grid-template-areas:"sidebar main";background-color:#36393f;height:100%;width:100%;margin:auto;box-sizing:border-box;border:var(--mdc-theme-primary) solid 5px;border-top:var(--mdc-theme-primary) solid 10px}#app{color:#fff;height:inherit;overflow:hidden;word-wrap:break-word;word-break:break-word}#left-menu{background-color:#2f3136;grid-area:sidebar}#channels .sidebar-item{display:block;color:#8e9297;padding:1px 8px;margin-left:0px;border-radius:4px}#channels .sidebar-item [selected]{background:var(--background-modifier-selected)}#channels .sidebar-item .channel-label{padding:6px 0;cursor:pointer;display:block;color:inherit;text-decoration:none}#channels .sidebar-item:hover{background:rgba(79,84,92,.16)}#channels .sidebar-item:active{background:var(--background-modifier-active)}.primary-box{padding:8px}.card-view .message-card{background-color:#51565f;padding-left:72px;padding-top:.125rem;padding-bottom:.125rem;padding-right:48px;margin:10px 0px;box-shadow:rgba(0,0,0,.12) 2px 2px 3px 2px}.discord-view .message-card{background-color:#36393f;padding-left:72px;padding-top:.125rem;padding-bottom:.125rem;padding-right:48px;margin:10px 0px}#chatlog{padding:5px;padding-right:75px;height:100px;overflow:auto;display:none}#main-content{grid-area:main}',"",{version:3,sources:["webpack://./discord-explorer/index.scss"],names:[],mappings:"AAAA,cAEI,sBAAA,CACA,2BAAA,CACA,sBAAA,CACA,qBAAA,CACA,oBAAA,CACA,2BAAA,CACA,6BAAA,CACA,4BAAA,CACA,0BAAA,CACA,4BAAA,CACA,6BAAA,CACA,+BAAA,CACA,mCAAA,CACA,8BAAA,CACA,4BAAA,CACA,8BAAA,CACA,oCAAA,CACA,sCAAA,CACA,mDAAA,CACA,oDAAA,CACA,sDAAA,CACA,qDAAA,CACA,gDAAA,CACA,sDAAA,CACA,+CAAA,CACA,kDAAA,CACA,8CAAA,CACA,+BAAA,CACA,mCAAA,CACA,+BAAA,CACA,+BAAA,CACA,+CAAA,CACA,+CAAA,CACA,iDAAA,CACA,uGAAA,CACA,iDAAA,CACA,gDAAA,CACA,oBAAA,CACA,wBAAA,CACA,qCAAA,CACA,wDAAA,CACA,qCAAA,CACA,mCAAA,CACA,kCAAA,CAGJ,KACI,gBAAA,CACA,gBAAA,CAGJ,UAEI,WAAA,CAGJ,KACI,QAAA,CACA,iDAAA,CAGJ,WACI,YAAA,CACA,gCAAA,CACA,kCAAA,CACA,wBAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,yCAAA,CACA,8CAAA,CAGJ,KACI,UAAA,CACA,cAAA,CACA,eAAA,CACA,oBAAA,CACA,qBAAA,CAGJ,WACI,wBAAA,CACA,iBAAA,CAIA,wBACI,aAAA,CACA,aAAA,CACA,eAAA,CACA,eAAA,CACA,iBAAA,CAEA,mCACI,8CAAA,CAGJ,uCACI,aAAA,CACA,cAAA,CACA,aAAA,CACA,aAAA,CACA,oBAAA,CAIR,8BACI,6BAAA,CAGJ,+BACI,4CAAA,CAIR,aACI,WAAA,CAGJ,yBACI,wBAAA,CACA,iBAAA,CACA,mBAAA,CACA,sBAAA,CACA,kBAAA,CACA,eAAA,CACA,0CAAA,CAGJ,4BACI,wBAAA,CACA,iBAAA,CACA,mBAAA,CACA,sBAAA,CACA,kBAAA,CACA,eAAA,CAGJ,SACI,WAAA,CACA,kBAAA,CACA,YAAA,CACA,aAAA,CACA,YAAA,CAGJ,cACI,cAAA",sourcesContent:[".discord-view {\r\n    /* Variables pulled directly from Discord source */\r\n    --header-primary: #fff;\r\n    --header-secondary: #b9bbbe;\r\n    --text-normal: #dcddde;\r\n    --text-muted: #72767d;\r\n    --text-link: #00b0f4;\r\n    --channels-default: #8e9297;\r\n    --interactive-normal: #b9bbbe;\r\n    --interactive-hover: #dcddde;\r\n    --interactive-active: #fff;\r\n    --interactive-muted: #4f545c;\r\n    --background-primary: #36393f;\r\n    --background-secondary: #2f3136;\r\n    --background-secondary-alt: #292b2f;\r\n    --background-tertiary: #202225;\r\n    --background-accent: #4f545c;\r\n    --background-floating: #18191c;\r\n    --background-mobile-primary: #36393f;\r\n    --background-mobile-secondary: #2f3136;\r\n    --background-modifier-hover: rgba(79, 84, 92, 0.16);\r\n    --background-modifier-active: rgba(79, 84, 92, 0.24);\r\n    --background-modifier-selected: rgba(79, 84, 92, 0.32);\r\n    --background-modifier-accent: hsla(0, 0%, 100%, 0.06);\r\n    --background-mentioned: rgba(250, 166, 26, 0.05);\r\n    --background-mentioned-hover: rgba(250, 166, 26, 0.08);\r\n    --background-message-hover: rgba(4, 4, 5, 0.07);\r\n    --background-help-warning: rgba(250, 166, 26, 0.1);\r\n    --background-help-info: rgba(0, 176, 244, 0.1);\r\n    --scrollbar-thin-thumb: #202225;\r\n    --scrollbar-thin-track: transparent;\r\n    --scrollbar-auto-thumb: #202225;\r\n    --scrollbar-auto-track: #2e3338;\r\n    --scrollbar-auto-scrollbar-color-thumb: #202225;\r\n    --scrollbar-auto-scrollbar-color-track: #2f3136;\r\n    --elevation-stroke: 0 0 0 1px rgba(4, 4, 5, 0.15);\r\n    --elevation-low: 0 1px 0 rgba(4, 4, 5, 0.2), 0 1.5px 0 rgba(6, 6, 7, 0.05), 0 2px 0 rgba(4, 4, 5, 0.05);\r\n    --elevation-medium: 0 4px 4px rgba(0, 0, 0, 0.16);\r\n    --elevation-high: 0 8px 16px rgba(0, 0, 0, 0.24);\r\n    --logo-primary: #fff;\r\n    --focus-primary: #00b0f4;\r\n    --radio-group-dot-foreground: #8ea1e1;\r\n    --guild-header-text-shadow: 0 1px 1px rgba(0, 0, 0, 0.4);\r\n    --channeltextarea-background: #40444b;\r\n    --activity-card-background: #202225;\r\n    --textbox-markdown-syntax: #8e9297;\r\n}\r\n\r\nmain {\r\n    padding-top: 64px;\r\n    padding-left: 8px;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    font-family: 'Roboto', Ubuntu, 'Segoe UI', sans-serif;\r\n}\r\n\r\n#inner-box {\r\n    display: grid;\r\n    grid-template-columns: 240px auto;\r\n    grid-template-areas: \"sidebar main\";\r\n    background-color: #36393f;\r\n    height: 100%;\r\n    width: 100%;\r\n    margin: auto;\r\n    box-sizing: border-box;\r\n    border: var(--mdc-theme-primary) solid 5px;\r\n    border-top: var(--mdc-theme-primary) solid 10px;\r\n}\r\n\r\n#app {\r\n    color: white;\r\n    height: inherit;\r\n    overflow: hidden;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n}\r\n\r\n#left-menu {\r\n    background-color: #2f3136;\r\n    grid-area: sidebar;\r\n}\r\n\r\n#channels {\r\n    .sidebar-item {\r\n        display: block;\r\n        color: #8e9297;\r\n        padding: 1px 8px;\r\n        margin-left: 0px;\r\n        border-radius: 4px;\r\n\r\n        [selected] {\r\n            background: var(--background-modifier-selected)\r\n        }\r\n\r\n        .channel-label {\r\n            padding: 6px 0;\r\n            cursor: pointer;\r\n            display: block;\r\n            color: inherit;\r\n            text-decoration: none;\r\n        }\r\n    }\r\n\r\n    .sidebar-item:hover {\r\n        background: rgba(79, 84, 92, 0.16);\r\n    }\r\n\r\n    .sidebar-item:active {\r\n        background: var(--background-modifier-active)\r\n    }\r\n}\r\n\r\n.primary-box {\r\n    padding: 8px;\r\n}\r\n\r\n.card-view .message-card {\r\n    background-color: #51565F;\r\n    padding-left: 72px;\r\n    padding-top: .125rem;\r\n    padding-bottom: .125rem;\r\n    padding-right: 48px;\r\n    margin: 10px 0px;\r\n    box-shadow: rgba(0, 0, 0, 0.12) 2px 2px 3px 2px;\r\n}\r\n\r\n.discord-view .message-card {\r\n    background-color: #36393f;\r\n    padding-left: 72px;\r\n    padding-top: .125rem;\r\n    padding-bottom: .125rem;\r\n    padding-right: 48px;\r\n    margin: 10px 0px;\r\n}\r\n\r\n#chatlog {\r\n    padding: 5px;\r\n    padding-right: 75px;\r\n    height: 100px;\r\n    overflow: auto;\r\n    display: none;\r\n}\r\n\r\n#main-content {\r\n    grid-area: main;\r\n}"],sourceRoot:""}]);const A=i},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n=r(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(r,n,t){"string"==typeof r&&(r=[[null,r,""]]);var a={};if(t)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var A=0;A<r.length;A++){var c=[].concat(r[A]);t&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:r=>{function e(r,e){(null==e||e>r.length)&&(e=r.length);for(var n=0,t=new Array(e);n<e;n++)t[n]=r[n];return t}r.exports=function(r){var n,t,a=(t=4,function(r){if(Array.isArray(r))return r}(n=r)||function(r,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(r)){var n=[],t=!0,a=!1,o=void 0;try{for(var i,A=r[Symbol.iterator]();!(t=(i=A.next()).done)&&(n.push(i.value),!e||n.length!==e);t=!0);}catch(r){a=!0,o=r}finally{try{t||null==A.return||A.return()}finally{if(a)throw o}}return n}}(n,t)||function(r,n){if(r){if("string"==typeof r)return e(r,n);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?e(r,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),d="/*# ".concat(c," */"),s=i.sources.map((function(r){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(r," */")}));return[o].concat(s).concat([d]).join("\n")}return[o].join("\n")}},379:(r,e,n)=>{var t,a=function(){var r={};return function(e){if(void 0===r[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}r[e]=n}return r[e]}}(),o=[];function i(r){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===r){e=n;break}return e}function A(r,e){for(var n={},t=[],a=0;a<r.length;a++){var A=r[a],c=e.base?A[0]+e.base:A[0],d=n[c]||0,s="".concat(c," ").concat(d);n[c]=d+1;var l=i(s),u={css:A[1],media:A[2],sourceMap:A[3]};-1!==l?(o[l].references++,o[l].updater(u)):o.push({identifier:s,updater:b(u,e),references:1}),t.push(s)}return t}function c(r){var e=document.createElement("style"),t=r.attributes||{};if(void 0===t.nonce){var o=n.nc;o&&(t.nonce=o)}if(Object.keys(t).forEach((function(r){e.setAttribute(r,t[r])})),"function"==typeof r.insert)r.insert(e);else{var i=a(r.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var d,s=(d=[],function(r,e){return d[r]=e,d.filter(Boolean).join("\n")});function l(r,e,n,t){var a=n?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(r.styleSheet)r.styleSheet.cssText=s(e,a);else{var o=document.createTextNode(a),i=r.childNodes;i[e]&&r.removeChild(i[e]),i.length?r.insertBefore(o,i[e]):r.appendChild(o)}}function u(r,e,n){var t=n.css,a=n.media,o=n.sourceMap;if(a?r.setAttribute("media",a):r.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}var g=null,p=0;function b(r,e){var n,t,a;if(e.singleton){var o=p++;n=g||(g=c(e)),t=l.bind(null,n,o,!1),a=l.bind(null,n,o,!0)}else n=c(e),t=u.bind(null,n,e),a=function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)};return t(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap)return;t(r=e)}else a()}}r.exports=function(r,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var n=A(r=r||[],e);return function(r){if(r=r||[],"[object Array]"===Object.prototype.toString.call(r)){for(var t=0;t<n.length;t++){var a=i(n[t]);o[a].references--}for(var c=A(r,e),d=0;d<n.length;d++){var s=i(n[d]);0===o[s].references&&(o[s].updater(),o.splice(s,1))}n=c}}}}},e={};function n(t){if(e[t])return e[t].exports;var a=e[t]={id:t,exports:{}};return r[t](a,a.exports,n),a.exports}n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),(()=>{var r=n(379),e=n.n(r),t=n(394);e()(t.Z,{insert:"head",singleton:!1}),t.Z.locals;var a=function(r,e,n,t){return new(n||(n=Promise))((function(a,o){function i(r){try{c(t.next(r))}catch(r){o(r)}}function A(r){try{c(t.throw(r))}catch(r){o(r)}}function c(r){var e;r.done?a(r.value):(e=r.value,e instanceof n?e:new n((function(r){r(e)}))).then(i,A)}c((t=t.apply(r,e||[])).next())}))},o=function(r,e){var n,t,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:A(0),throw:A(1),return:A(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function A(o){return function(A){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,t&&(a=2&o[0]?t.return:o[0]?t.throw||((a=t.return)&&a.call(t),0):t.next)&&!(a=a.call(t,o[1])).done)return a;switch(t=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,t=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],t=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,A])}}},i=[{id:"727912383833702411",name:"general"},{id:"793448224353550346",name:"mind-is-tree"}],A={},c=0,d="none";function s(r){var e,n,t,a=A.data[r],o=document.createElement("div");o.setAttribute("class","chunk"),o.setAttribute("id","chunk-"+r),$("#chatlog").append(o);for(var i=0,d=a;i<d.length;i++)e=d[i],n=o,t=void 0,(t=document.createElement("div")).setAttribute("class","message-card"),t.setAttribute("id","msg-"+e.id),t.innerText=e.content,n.appendChild(t),$("#progress").html("Rendering "+a.length+" messages");c+=1,l(),console.log("Finished rendering chunk "+r+" ("+a.length+" messages)"),$("#progress").hide()}function l(){$("#left-menu").css("height",window.innerHeight.toString()+"px"),$("#chatlog").css("height",(window.innerHeight-40).toString()+"px"),$(window).width()<600?"sidebar"!==d&&($("#inner-box").css("grid-template-areas",'"sidebar"'),$("#inner-box").css("grid-template-columns","unset"),$("#main-content").hide(),$("#left-menu").show(),d="sidebar"):"none"!==d&&($("#inner-box").css("grid-template-areas",""),$("#inner-box").css("grid-template-columns",""),$("#left-menu").show(),$("#main-content").show(),d="none")}$((function(){$(window).on("resize",l),l(),function(){$("#left-menu").append($('<div id="channels"></div>'));for(var r=0,e=i;r<e.length;r++){var n=e[r],t=$('\n            <div class="sidebar-item">\n                <a class="channel-label" href="#"> '+n.name+" </a>\n            </div>\n        ");t[0].dataset.channelId=n.id,$("#channels").append(t)}$(".sidebar-item").on("click",(function(r){var e;$(".sidebar-item[selected]").attr("selected",null),e=r.target.parentElement.dataset.channelId.toString(),a(void 0,void 0,void 0,(function(){var r,n,t;return o(this,(function(i){switch(i.label){case 0:return $("#chatlog").html("").scrollTop(0),$("body").css("cursor","wait"),A.id=e,r=performance.now(),[4,$.getJSON("assets/"+e+".json")];case 1:return n=i.sent(),t=performance.now()-r,console.log("Getting and parsing the JSON took "+Math.round(t)+"ms"),c=n.messages,a(void 0,void 0,void 0,(function(){var r,e,n;return o(this,(function(t){if(r=[],c.length>=100){for(e=Math.ceil(c.length/100),n=0;n<e;n++)r.push(c.slice(100*n,100*n+100));console.log("Split "+c.length+" messages into "+r.length+" chunks")}else r=[c];return A.data=r,r[0],s(0),$("#chatlog").show(),[2]}))})),$("body").css("cursor",""),[2]}var c}))})),r.target.parentElement.setAttribute("selected","")}))}()}));var u,g=(u=[],$.getJSON("https://rocky-castle-55647.herokuapp.com/https://status.mojang.com/check",(function(r){"green"!=r[0]["minecraft.net"]&&u.push("minecraft.net"),"green"!=r[1]["session.minecraft.net"]&&u.push("session.minecraft.net"),"green"!=r[2]["account.mojang.com"]&&u.push("account.mojang.com"),"green"!=r[3]["authserver.mojang.com"]&&u.push("authserver.mojang.com"),"green"!=r[5]["api.mojang.com"]&&u.push("api.mojang.com"),"green"!=r[6]["textures.minecraft.net"]&&u.push("textures.minecraft.net"),"green"!=r[7]["mojang.com"]&&u.push("mojang.com")})),$.getJSON("https://kctbh9vrtdwd.statuspage.io/api/v2/status.json",(function(r){"major"==r.status.indicator&&u.push("github.com")})),$.getJSON("https://kctbh9vrtdwd.statuspage.io/api/v2/components.json",(function(r){"operational"!=r.components[8].status&&u.push("github.io")})),u);0!=g.length&&console.warn("One or more services are reporting degraded performance or an outage.",g);var p=!1;$("#chatlog").on("scroll",(function(){c>=A.data.length||$("#chatlog").scrollTop()/(document.getElementById("chatlog").scrollHeight-$("#chatlog").height())*100>=95&&!p&&(p=!0,s(c),setTimeout((function(){p=!1}),10))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tbWsyMWh1Yi5naXRodWIuaW8vLi9kaXNjb3JkLWV4cGxvcmVyL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vbW1rMjFodWIuZ2l0aHViLmlvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9tbWsyMWh1Yi5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9tbWsyMWh1Yi5naXRodWIuaW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vbW1rMjFodWIuZ2l0aHViLmlvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21tazIxaHViLmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9tbWsyMWh1Yi5naXRodWIuaW8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21tazIxaHViLmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL21tazIxaHViLmdpdGh1Yi5pby8uL2Rpc2NvcmQtZXhwbG9yZXIvaW5kZXguc2Nzcz82ZjA5Iiwid2VicGFjazovL21tazIxaHViLmdpdGh1Yi5pby8uL2Rpc2NvcmQtZXhwbG9yZXIvaW5kZXgudHMiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9pdGVtIiwiaXNBcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiT2JqZWN0IiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsInVuZGVmaW5lZCIsIl9zIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwicHJvdG90eXBlIiwiY2FsbCIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsIm1lbW8iLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImtleXMiLCJmb3JFYWNoIiwia2V5Iiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsImJpbmQiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYWxsIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImNoYW5uZWxMaXN0IiwiY3VycmVudENoYW5uZWwiLCJsb2FkZWRDaHVua3MiLCJ6ZW5TdGF0ZSIsInJlbmRlckNodW5rIiwiY2h1bmtJbmRleCIsIm1zZyIsImNodW5rRWxlbWVudCIsIm1lc3NhZ2VDYXJkIiwiY2h1bmsiLCJjaHVua0RpdiIsIiQiLCJhcHBlbmQiLCJpbm5lclRleHQiLCJodG1sIiwiZml4Vmlld3BvcnQiLCJjb25zb2xlIiwibG9nIiwiaGlkZSIsImlubmVySGVpZ2h0Iiwid2lkdGgiLCJzaG93Iiwib24iLCJjaGFubmVsIiwiYnV0dG9uIiwiZGF0YXNldCIsImNoYW5uZWxJZCIsImN0eCIsImF0dHIiLCJwYXJlbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwic3RhcnRUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJnZXRKU09OIiwiY2hhbm5lbERhdGEiLCJkdXJhdGlvbiIsIk1hdGgiLCJyb3VuZCIsIm1lc3NhZ2VzIiwiY2h1bmtlZE1lc3NhZ2VzIiwiY2h1bmtzIiwiY2VpbCIsImxvYWRTaWRlYmFyIiwiZG93blN0YXR1c2VzIiwic3RhdHVzZXMiLCJzdGF0dXMiLCJpbmRpY2F0b3IiLCJjb21wb25lbnRzIiwid2FybiIsImxvYWRpbmdNZXNzYWdlcyIsImdldEVsZW1lbnRCeUlkIiwic2Nyb2xsSGVpZ2h0IiwiaGVpZ2h0Iiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6InVGQUdJQSxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLDBtR0FBaW5HLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDJDQUEyQyxNQUFRLEdBQUcsU0FBVyxzb0NBQXNvQyxlQUFpQixDQUFDLHF6SUFBcXpJLFdBQWEsTUFFaHRSLFcsUUNDQUQsRUFBT0UsUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBdURYLE9BckRBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVTixFQUF1QkssR0FFckMsT0FBSUEsRUFBSyxHQUNBLFVBQVVFLE9BQU9GLEVBQUssR0FBSSxNQUFNRSxPQUFPRCxFQUFTLEtBR2xEQSxLQUNORSxLQUFLLEtBS1ZQLEVBQUtRLEVBQUksU0FBVUMsRUFBU0MsRUFBWUMsR0FDZixpQkFBWkYsSUFFVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsRUFBUyxNQUc3QixJQUFJRyxFQUF5QixHQUU3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QUVtQixTQUFyQzhELEVBQUssR0FBRywyQkFDUnlJLEVBQWF2TSxLQUFLLDBCQUVPLFNBQXpCOEQsRUFBSyxHQUFHLGVBQ1J5SSxFQUFhdk0sS0FBSyxpQkFLOUJzSyxFQUFFdUIsUUFDRSx5REFDQSxTQUFDL0gsR0FDZ0MsU0FBekJBLEVBQUsySSxPQUFPQyxXQUNaSCxFQUFhdk0sS0FBSyxpQkFLOUJzSyxFQUFFdUIsUUFDRSw2REFDQSxTQUFDL0gsR0FDb0MsZUFBN0JBLEVBQUs2SSxXQUFXLEdBQUdGLFFBQ25CRixFQUFhdk0sS0FBSyxnQkFLdkJ1TSxHQUlZLEdBQW5CQyxFQUFTdEwsUUFXVHlKLFFBQVFpQyxLQUNKLHdFQUNBSixHQVNSLElBQUlLLEdBQWtCLEVBQ3RCdkMsRUFBRSxZQUFZVyxHQUFHLFVBQVUsV0FDbkJwQixHQUFnQkQsRUFBZTlGLEtBQUs1QyxRQUNqQm9KLEVBQUUsWUFBWW1CLGFBQ2xCakgsU0FBU3NJLGVBQWUsV0FBV0MsYUFDdkN6QyxFQUFFLFlBQVkwQyxVQUNvQyxLQVE1QyxLQUFPSCxJQUN4QkEsR0FBa0IsRUFDbEI5QyxFQUFZRixHQUNab0QsWUFBVyxXQUNQSixHQUFrQixJQUNuQixTIiwiZmlsZSI6ImRpc2NvcmQtZXhwbG9yZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5kaXNjb3JkLXZpZXd7LS1oZWFkZXItcHJpbWFyeTogI2ZmZjstLWhlYWRlci1zZWNvbmRhcnk6ICNiOWJiYmU7LS10ZXh0LW5vcm1hbDogI2RjZGRkZTstLXRleHQtbXV0ZWQ6ICM3Mjc2N2Q7LS10ZXh0LWxpbms6ICMwMGIwZjQ7LS1jaGFubmVscy1kZWZhdWx0OiAjOGU5Mjk3Oy0taW50ZXJhY3RpdmUtbm9ybWFsOiAjYjliYmJlOy0taW50ZXJhY3RpdmUtaG92ZXI6ICNkY2RkZGU7LS1pbnRlcmFjdGl2ZS1hY3RpdmU6ICNmZmY7LS1pbnRlcmFjdGl2ZS1tdXRlZDogIzRmNTQ1YzstLWJhY2tncm91bmQtcHJpbWFyeTogIzM2MzkzZjstLWJhY2tncm91bmQtc2Vjb25kYXJ5OiAjMmYzMTM2Oy0tYmFja2dyb3VuZC1zZWNvbmRhcnktYWx0OiAjMjkyYjJmOy0tYmFja2dyb3VuZC10ZXJ0aWFyeTogIzIwMjIyNTstLWJhY2tncm91bmQtYWNjZW50OiAjNGY1NDVjOy0tYmFja2dyb3VuZC1mbG9hdGluZzogIzE4MTkxYzstLWJhY2tncm91bmQtbW9iaWxlLXByaW1hcnk6ICMzNjM5M2Y7LS1iYWNrZ3JvdW5kLW1vYmlsZS1zZWNvbmRhcnk6ICMyZjMxMzY7LS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyOiByZ2JhKDc5LCA4NCwgOTIsIDAuMTYpOy0tYmFja2dyb3VuZC1tb2RpZmllci1hY3RpdmU6IHJnYmEoNzksIDg0LCA5MiwgMC4yNCk7LS1iYWNrZ3JvdW5kLW1vZGlmaWVyLXNlbGVjdGVkOiByZ2JhKDc5LCA4NCwgOTIsIDAuMzIpOy0tYmFja2dyb3VuZC1tb2RpZmllci1hY2NlbnQ6IGhzbGEoMCwgMCUsIDEwMCUsIDAuMDYpOy0tYmFja2dyb3VuZC1tZW50aW9uZWQ6IHJnYmEoMjUwLCAxNjYsIDI2LCAwLjA1KTstLWJhY2tncm91bmQtbWVudGlvbmVkLWhvdmVyOiByZ2JhKDI1MCwgMTY2LCAyNiwgMC4wOCk7LS1iYWNrZ3JvdW5kLW1lc3NhZ2UtaG92ZXI6IHJnYmEoNCwgNCwgNSwgMC4wNyk7LS1iYWNrZ3JvdW5kLWhlbHAtd2FybmluZzogcmdiYSgyNTAsIDE2NiwgMjYsIDAuMSk7LS1iYWNrZ3JvdW5kLWhlbHAtaW5mbzogcmdiYSgwLCAxNzYsIDI0NCwgMC4xKTstLXNjcm9sbGJhci10aGluLXRodW1iOiAjMjAyMjI1Oy0tc2Nyb2xsYmFyLXRoaW4tdHJhY2s6IHRyYW5zcGFyZW50Oy0tc2Nyb2xsYmFyLWF1dG8tdGh1bWI6ICMyMDIyMjU7LS1zY3JvbGxiYXItYXV0by10cmFjazogIzJlMzMzODstLXNjcm9sbGJhci1hdXRvLXNjcm9sbGJhci1jb2xvci10aHVtYjogIzIwMjIyNTstLXNjcm9sbGJhci1hdXRvLXNjcm9sbGJhci1jb2xvci10cmFjazogIzJmMzEzNjstLWVsZXZhdGlvbi1zdHJva2U6IDAgMCAwIDFweCByZ2JhKDQsIDQsIDUsIDAuMTUpOy0tZWxldmF0aW9uLWxvdzogMCAxcHggMCByZ2JhKDQsIDQsIDUsIDAuMiksIDAgMS41cHggMCByZ2JhKDYsIDYsIDcsIDAuMDUpLCAwIDJweCAwIHJnYmEoNCwgNCwgNSwgMC4wNSk7LS1lbGV2YXRpb24tbWVkaXVtOiAwIDRweCA0cHggcmdiYSgwLCAwLCAwLCAwLjE2KTstLWVsZXZhdGlvbi1oaWdoOiAwIDhweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4yNCk7LS1sb2dvLXByaW1hcnk6ICNmZmY7LS1mb2N1cy1wcmltYXJ5OiAjMDBiMGY0Oy0tcmFkaW8tZ3JvdXAtZG90LWZvcmVncm91bmQ6ICM4ZWExZTE7LS1ndWlsZC1oZWFkZXItdGV4dC1zaGFkb3c6IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuNCk7LS1jaGFubmVsdGV4dGFyZWEtYmFja2dyb3VuZDogIzQwNDQ0YjstLWFjdGl2aXR5LWNhcmQtYmFja2dyb3VuZDogIzIwMjIyNTstLXRleHRib3gtbWFya2Rvd24tc3ludGF4OiAjOGU5Mjk3fW1haW57cGFkZGluZy10b3A6NjRweDtwYWRkaW5nLWxlZnQ6OHB4fWh0bWwsYm9keXtoZWlnaHQ6MTAwJX1ib2R5e21hcmdpbjowO2ZvbnQtZmFtaWx5OlxcXCJSb2JvdG9cXFwiLFVidW50dSxcXFwiU2Vnb2UgVUlcXFwiLHNhbnMtc2VyaWZ9I2lubmVyLWJveHtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjI0MHB4IGF1dG87Z3JpZC10ZW1wbGF0ZS1hcmVhczpcXFwic2lkZWJhciBtYWluXFxcIjtiYWNrZ3JvdW5kLWNvbG9yOiMzNjM5M2Y7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTttYXJnaW46YXV0bztib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOnZhcigtLW1kYy10aGVtZS1wcmltYXJ5KSBzb2xpZCA1cHg7Ym9yZGVyLXRvcDp2YXIoLS1tZGMtdGhlbWUtcHJpbWFyeSkgc29saWQgMTBweH0jYXBwe2NvbG9yOiNmZmY7aGVpZ2h0OmluaGVyaXQ7b3ZlcmZsb3c6aGlkZGVuO3dvcmQtd3JhcDpicmVhay13b3JkO3dvcmQtYnJlYWs6YnJlYWstd29yZH0jbGVmdC1tZW51e2JhY2tncm91bmQtY29sb3I6IzJmMzEzNjtncmlkLWFyZWE6c2lkZWJhcn0jY2hhbm5lbHMgLnNpZGViYXItaXRlbXtkaXNwbGF5OmJsb2NrO2NvbG9yOiM4ZTkyOTc7cGFkZGluZzoxcHggOHB4O21hcmdpbi1sZWZ0OjBweDtib3JkZXItcmFkaXVzOjRweH0jY2hhbm5lbHMgLnNpZGViYXItaXRlbSBbc2VsZWN0ZWRde2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1zZWxlY3RlZCl9I2NoYW5uZWxzIC5zaWRlYmFyLWl0ZW0gLmNoYW5uZWwtbGFiZWx7cGFkZGluZzo2cHggMDtjdXJzb3I6cG9pbnRlcjtkaXNwbGF5OmJsb2NrO2NvbG9yOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOm5vbmV9I2NoYW5uZWxzIC5zaWRlYmFyLWl0ZW06aG92ZXJ7YmFja2dyb3VuZDpyZ2JhKDc5LDg0LDkyLC4xNil9I2NoYW5uZWxzIC5zaWRlYmFyLWl0ZW06YWN0aXZle2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1hY3RpdmUpfS5wcmltYXJ5LWJveHtwYWRkaW5nOjhweH0uY2FyZC12aWV3IC5tZXNzYWdlLWNhcmR7YmFja2dyb3VuZC1jb2xvcjojNTE1NjVmO3BhZGRpbmctbGVmdDo3MnB4O3BhZGRpbmctdG9wOi4xMjVyZW07cGFkZGluZy1ib3R0b206LjEyNXJlbTtwYWRkaW5nLXJpZ2h0OjQ4cHg7bWFyZ2luOjEwcHggMHB4O2JveC1zaGFkb3c6cmdiYSgwLDAsMCwuMTIpIDJweCAycHggM3B4IDJweH0uZGlzY29yZC12aWV3IC5tZXNzYWdlLWNhcmR7YmFja2dyb3VuZC1jb2xvcjojMzYzOTNmO3BhZGRpbmctbGVmdDo3MnB4O3BhZGRpbmctdG9wOi4xMjVyZW07cGFkZGluZy1ib3R0b206LjEyNXJlbTtwYWRkaW5nLXJpZ2h0OjQ4cHg7bWFyZ2luOjEwcHggMHB4fSNjaGF0bG9ne3BhZGRpbmc6NXB4O3BhZGRpbmctcmlnaHQ6NzVweDtoZWlnaHQ6MTAwcHg7b3ZlcmZsb3c6YXV0bztkaXNwbGF5Om5vbmV9I21haW4tY29udGVudHtncmlkLWFyZWE6bWFpbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9kaXNjb3JkLWV4cGxvcmVyL2luZGV4LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsY0FFSSxzQkFBQSxDQUNBLDJCQUFBLENBQ0Esc0JBQUEsQ0FDQSxxQkFBQSxDQUNBLG9CQUFBLENBQ0EsMkJBQUEsQ0FDQSw2QkFBQSxDQUNBLDRCQUFBLENBQ0EsMEJBQUEsQ0FDQSw0QkFBQSxDQUNBLDZCQUFBLENBQ0EsK0JBQUEsQ0FDQSxtQ0FBQSxDQUNBLDhCQUFBLENBQ0EsNEJBQUEsQ0FDQSw4QkFBQSxDQUNBLG9DQUFBLENBQ0Esc0NBQUEsQ0FDQSxtREFBQSxDQUNBLG9EQUFBLENBQ0Esc0RBQUEsQ0FDQSxxREFBQSxDQUNBLGdEQUFBLENBQ0Esc0RBQUEsQ0FDQSwrQ0FBQSxDQUNBLGtEQUFBLENBQ0EsOENBQUEsQ0FDQSwrQkFBQSxDQUNBLG1DQUFBLENBQ0EsK0JBQUEsQ0FDQSwrQkFBQSxDQUNBLCtDQUFBLENBQ0EsK0NBQUEsQ0FDQSxpREFBQSxDQUNBLHVHQUFBLENBQ0EsaURBQUEsQ0FDQSxnREFBQSxDQUNBLG9CQUFBLENBQ0Esd0JBQUEsQ0FDQSxxQ0FBQSxDQUNBLHdEQUFBLENBQ0EscUNBQUEsQ0FDQSxtQ0FBQSxDQUNBLGtDQUFBLENBR0osS0FDSSxnQkFBQSxDQUNBLGdCQUFBLENBR0osVUFFSSxXQUFBLENBR0osS0FDSSxRQUFBLENBQ0EsaURBQUEsQ0FHSixXQUNJLFlBQUEsQ0FDQSxnQ0FBQSxDQUNBLGtDQUFBLENBQ0Esd0JBQUEsQ0FDQSxXQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FDQSxxQkFBQSxDQUNBLHlDQUFBLENBQ0EsOENBQUEsQ0FHSixLQUNJLFVBQUEsQ0FDQSxjQUFBLENBQ0EsZUFBQSxDQUNBLG9CQUFBLENBQ0EscUJBQUEsQ0FHSixXQUNJLHdCQUFBLENBQ0EsaUJBQUEsQ0FJQSx3QkFDSSxhQUFBLENBQ0EsYUFBQSxDQUNBLGVBQUEsQ0FDQSxlQUFBLENBQ0EsaUJBQUEsQ0FFQSxtQ0FDSSw4Q0FBQSxDQUdKLHVDQUNJLGFBQUEsQ0FDQSxjQUFBLENBQ0EsYUFBQSxDQUNBLGFBQUEsQ0FDQSxvQkFBQSxDQUlSLDhCQUNJLDZCQUFBLENBR0osK0JBQ0ksNENBQUEsQ0FJUixhQUNJLFdBQUEsQ0FHSix5QkFDSSx3QkFBQSxDQUNBLGlCQUFBLENBQ0EsbUJBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0EsZUFBQSxDQUNBLDBDQUFBLENBR0osNEJBQ0ksd0JBQUEsQ0FDQSxpQkFBQSxDQUNBLG1CQUFBLENBQ0Esc0JBQUEsQ0FDQSxrQkFBQSxDQUNBLGVBQUEsQ0FHSixTQUNJLFdBQUEsQ0FDQSxrQkFBQSxDQUNBLFlBQUEsQ0FDQSxhQUFBLENBQ0EsWUFBQSxDQUdKLGNBQ0ksY0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZGlzY29yZC12aWV3IHtcXHJcXG4gICAgLyogVmFyaWFibGVzIHB1bGxlZCBkaXJlY3RseSBmcm9tIERpc2NvcmQgc291cmNlICovXFxyXFxuICAgIC0taGVhZGVyLXByaW1hcnk6ICNmZmY7XFxyXFxuICAgIC0taGVhZGVyLXNlY29uZGFyeTogI2I5YmJiZTtcXHJcXG4gICAgLS10ZXh0LW5vcm1hbDogI2RjZGRkZTtcXHJcXG4gICAgLS10ZXh0LW11dGVkOiAjNzI3NjdkO1xcclxcbiAgICAtLXRleHQtbGluazogIzAwYjBmNDtcXHJcXG4gICAgLS1jaGFubmVscy1kZWZhdWx0OiAjOGU5Mjk3O1xcclxcbiAgICAtLWludGVyYWN0aXZlLW5vcm1hbDogI2I5YmJiZTtcXHJcXG4gICAgLS1pbnRlcmFjdGl2ZS1ob3ZlcjogI2RjZGRkZTtcXHJcXG4gICAgLS1pbnRlcmFjdGl2ZS1hY3RpdmU6ICNmZmY7XFxyXFxuICAgIC0taW50ZXJhY3RpdmUtbXV0ZWQ6ICM0ZjU0NWM7XFxyXFxuICAgIC0tYmFja2dyb3VuZC1wcmltYXJ5OiAjMzYzOTNmO1xcclxcbiAgICAtLWJhY2tncm91bmQtc2Vjb25kYXJ5OiAjMmYzMTM2O1xcclxcbiAgICAtLWJhY2tncm91bmQtc2Vjb25kYXJ5LWFsdDogIzI5MmIyZjtcXHJcXG4gICAgLS1iYWNrZ3JvdW5kLXRlcnRpYXJ5OiAjMjAyMjI1O1xcclxcbiAgICAtLWJhY2tncm91bmQtYWNjZW50OiAjNGY1NDVjO1xcclxcbiAgICAtLWJhY2tncm91bmQtZmxvYXRpbmc6ICMxODE5MWM7XFxyXFxuICAgIC0tYmFja2dyb3VuZC1tb2JpbGUtcHJpbWFyeTogIzM2MzkzZjtcXHJcXG4gICAgLS1iYWNrZ3JvdW5kLW1vYmlsZS1zZWNvbmRhcnk6ICMyZjMxMzY7XFxyXFxuICAgIC0tYmFja2dyb3VuZC1tb2RpZmllci1ob3ZlcjogcmdiYSg3OSwgODQsIDkyLCAwLjE2KTtcXHJcXG4gICAgLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWFjdGl2ZTogcmdiYSg3OSwgODQsIDkyLCAwLjI0KTtcXHJcXG4gICAgLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLXNlbGVjdGVkOiByZ2JhKDc5LCA4NCwgOTIsIDAuMzIpO1xcclxcbiAgICAtLWJhY2tncm91bmQtbW9kaWZpZXItYWNjZW50OiBoc2xhKDAsIDAlLCAxMDAlLCAwLjA2KTtcXHJcXG4gICAgLS1iYWNrZ3JvdW5kLW1lbnRpb25lZDogcmdiYSgyNTAsIDE2NiwgMjYsIDAuMDUpO1xcclxcbiAgICAtLWJhY2tncm91bmQtbWVudGlvbmVkLWhvdmVyOiByZ2JhKDI1MCwgMTY2LCAyNiwgMC4wOCk7XFxyXFxuICAgIC0tYmFja2dyb3VuZC1tZXNzYWdlLWhvdmVyOiByZ2JhKDQsIDQsIDUsIDAuMDcpO1xcclxcbiAgICAtLWJhY2tncm91bmQtaGVscC13YXJuaW5nOiByZ2JhKDI1MCwgMTY2LCAyNiwgMC4xKTtcXHJcXG4gICAgLS1iYWNrZ3JvdW5kLWhlbHAtaW5mbzogcmdiYSgwLCAxNzYsIDI0NCwgMC4xKTtcXHJcXG4gICAgLS1zY3JvbGxiYXItdGhpbi10aHVtYjogIzIwMjIyNTtcXHJcXG4gICAgLS1zY3JvbGxiYXItdGhpbi10cmFjazogdHJhbnNwYXJlbnQ7XFxyXFxuICAgIC0tc2Nyb2xsYmFyLWF1dG8tdGh1bWI6ICMyMDIyMjU7XFxyXFxuICAgIC0tc2Nyb2xsYmFyLWF1dG8tdHJhY2s6ICMyZTMzMzg7XFxyXFxuICAgIC0tc2Nyb2xsYmFyLWF1dG8tc2Nyb2xsYmFyLWNvbG9yLXRodW1iOiAjMjAyMjI1O1xcclxcbiAgICAtLXNjcm9sbGJhci1hdXRvLXNjcm9sbGJhci1jb2xvci10cmFjazogIzJmMzEzNjtcXHJcXG4gICAgLS1lbGV2YXRpb24tc3Ryb2tlOiAwIDAgMCAxcHggcmdiYSg0LCA0LCA1LCAwLjE1KTtcXHJcXG4gICAgLS1lbGV2YXRpb24tbG93OiAwIDFweCAwIHJnYmEoNCwgNCwgNSwgMC4yKSwgMCAxLjVweCAwIHJnYmEoNiwgNiwgNywgMC4wNSksIDAgMnB4IDAgcmdiYSg0LCA0LCA1LCAwLjA1KTtcXHJcXG4gICAgLS1lbGV2YXRpb24tbWVkaXVtOiAwIDRweCA0cHggcmdiYSgwLCAwLCAwLCAwLjE2KTtcXHJcXG4gICAgLS1lbGV2YXRpb24taGlnaDogMCA4cHggMTZweCByZ2JhKDAsIDAsIDAsIDAuMjQpO1xcclxcbiAgICAtLWxvZ28tcHJpbWFyeTogI2ZmZjtcXHJcXG4gICAgLS1mb2N1cy1wcmltYXJ5OiAjMDBiMGY0O1xcclxcbiAgICAtLXJhZGlvLWdyb3VwLWRvdC1mb3JlZ3JvdW5kOiAjOGVhMWUxO1xcclxcbiAgICAtLWd1aWxkLWhlYWRlci10ZXh0LXNoYWRvdzogMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC40KTtcXHJcXG4gICAgLS1jaGFubmVsdGV4dGFyZWEtYmFja2dyb3VuZDogIzQwNDQ0YjtcXHJcXG4gICAgLS1hY3Rpdml0eS1jYXJkLWJhY2tncm91bmQ6ICMyMDIyMjU7XFxyXFxuICAgIC0tdGV4dGJveC1tYXJrZG93bi1zeW50YXg6ICM4ZTkyOTc7XFxyXFxufVxcclxcblxcclxcbm1haW4ge1xcclxcbiAgICBwYWRkaW5nLXRvcDogNjRweDtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiA4cHg7XFxyXFxufVxcclxcblxcclxcbmh0bWwsXFxyXFxuYm9keSB7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nLCBVYnVudHUsICdTZWdvZSBVSScsIHNhbnMtc2VyaWY7XFxyXFxufVxcclxcblxcclxcbiNpbm5lci1ib3gge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDI0MHB4IGF1dG87XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcXCJzaWRlYmFyIG1haW5cXFwiO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzYzOTNmO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIGJvcmRlcjogdmFyKC0tbWRjLXRoZW1lLXByaW1hcnkpIHNvbGlkIDVweDtcXHJcXG4gICAgYm9yZGVyLXRvcDogdmFyKC0tbWRjLXRoZW1lLXByaW1hcnkpIHNvbGlkIDEwcHg7XFxyXFxufVxcclxcblxcclxcbiNhcHAge1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGhlaWdodDogaW5oZXJpdDtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xcclxcbiAgICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xcclxcbn1cXHJcXG5cXHJcXG4jbGVmdC1tZW51IHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJmMzEzNjtcXHJcXG4gICAgZ3JpZC1hcmVhOiBzaWRlYmFyO1xcclxcbn1cXHJcXG5cXHJcXG4jY2hhbm5lbHMge1xcclxcbiAgICAuc2lkZWJhci1pdGVtIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgY29sb3I6ICM4ZTkyOTc7XFxyXFxuICAgICAgICBwYWRkaW5nOiAxcHggOHB4O1xcclxcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG5cXHJcXG4gICAgICAgIFtzZWxlY3RlZF0ge1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItc2VsZWN0ZWQpXFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuY2hhbm5lbC1sYWJlbCB7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogNnB4IDA7XFxyXFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xcclxcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuc2lkZWJhci1pdGVtOmhvdmVyIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoNzksIDg0LCA5MiwgMC4xNik7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNpZGViYXItaXRlbTphY3RpdmUge1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1hY3RpdmUpXFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLnByaW1hcnktYm94IHtcXHJcXG4gICAgcGFkZGluZzogOHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uY2FyZC12aWV3IC5tZXNzYWdlLWNhcmQge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTE1NjVGO1xcclxcbiAgICBwYWRkaW5nLWxlZnQ6IDcycHg7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAuMTI1cmVtO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogLjEyNXJlbTtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogNDhweDtcXHJcXG4gICAgbWFyZ2luOiAxMHB4IDBweDtcXHJcXG4gICAgYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjEyKSAycHggMnB4IDNweCAycHg7XFxyXFxufVxcclxcblxcclxcbi5kaXNjb3JkLXZpZXcgLm1lc3NhZ2UtY2FyZCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzNjM5M2Y7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogNzJweDtcXHJcXG4gICAgcGFkZGluZy10b3A6IC4xMjVyZW07XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAuMTI1cmVtO1xcclxcbiAgICBwYWRkaW5nLXJpZ2h0OiA0OHB4O1xcclxcbiAgICBtYXJnaW46IDEwcHggMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4jY2hhdGxvZyB7XFxyXFxuICAgIHBhZGRpbmc6IDVweDtcXHJcXG4gICAgcGFkZGluZy1yaWdodDogNzVweDtcXHJcXG4gICAgaGVpZ2h0OiAxMDBweDtcXHJcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNtYWluLWNvbnRlbnQge1xcclxcbiAgICBncmlkLWFyZWE6IG1haW47XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBEaXNjb3JkUmVuZGVyIC0gVmlldyBEaXNjb3JkIGNoYW5uZWwgZXhwb3J0cyByaWdodCBpbiB5b3VyIGJyb3dzZXIuXHJcblxyXG5pbnRlcmZhY2UgbWVzc2FnZSB7XHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICB0eXBlOiBzdHJpbmdcclxuICAgIGF1dGhvcjogdXNlclxyXG4gICAgdGltZXN0YW1wOiBzdHJpbmdcclxuICAgIHRpbWVzdGFtcEVkaXRlZD86IHN0cmluZyB8IG51bGxcclxuICAgIGNhbGxFbmRlZFRpbWVzdGFtcD86IG51bGxcclxuICAgIGlzUGlubmVkPzogYm9vbGVhblxyXG4gICAgY29udGVudDogc3RyaW5nXHJcbiAgICBhdHRhY2htZW50czogQXJyYXk8YXR0YWNobWVudD5cclxuICAgIGVtYmVkczogQXJyYXk8ZW1iZWQ+XHJcbiAgICByZWFjdGlvbnM6IEFycmF5PHJlYWN0aW9uPlxyXG4gICAgbWVudGlvbnM6IEFycmF5PGFueT5cclxufVxyXG5cclxuaW50ZXJmYWNlIHVzZXIge1xyXG4gICAgaWQ6IHN0cmluZ1xyXG4gICAgbmFtZTogc3RyaW5nXHJcbiAgICBkaXNjcmltaW5hdG9yOiBzdHJpbmdcclxuICAgIGlzQm90OiBib29sZWFuXHJcbiAgICBhdmF0YXJVcmw6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgYXR0YWNobWVudCB7XHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICB1cmw6IHN0cmluZ1xyXG4gICAgZmlsZU5hbWU6IHN0cmluZ1xyXG4gICAgZmlsZVNpemVCeXRlczogbnVtYmVyXHJcbn1cclxuXHJcbmludGVyZmFjZSBlbWJlZCB7XHJcbiAgICAvLyBFbWJlZHMgYXJlIG5vdCBzdXBwb3J0ZWQgeWV0XHJcbn1cclxuXHJcbmludGVyZmFjZSByZWFjdGlvbiB7XHJcbiAgICBlbW9qaTogZW1vamlcclxuICAgIGNvdW50OiBudW1iZXJcclxufVxyXG5cclxuaW50ZXJmYWNlIGVtb2ppIHtcclxuICAgIGlkOiBudWxsXHJcbiAgICBuYW1lOiBzdHJpbmdcclxuICAgIGlzQW5pbWF0ZWQ6IGJvb2xlYW5cclxuICAgIGltYWdlVXJsOiBzdHJpbmdcclxufVxyXG5cclxuLy8gSGVscCB0b29sdGlwczpcclxuY29uc3QgaGVscFRvb2x0aXBzID0ge1xyXG4gICAgY2hhdGxvZzogXCJUaGUgY2hhdGxvZyAtIFRoaXMgaXMgd2hlcmUgYWxsIHRoZSBtZXNzYWdlcyBzaG93IHVwLlwiLFxyXG4gICAgc2lkZWJhcjogXCJUaGUgc2lkZWJhciAtIFN3aXRjaCBiZXR3ZWVuIGRpZmZlcmVudCBjaGFubmVscyBoZXJlLlwiLFxyXG4gICAgdG9wX2JhcjpcclxuICAgICAgICBcIlRvcCBhcHAgYmFyIC0gVGhlIHRpdGxlIG9mIHlvdXIgY3VycmVudCBzY3JlZW4gYW5kIHF1aWNrIGFjdGlvbnMgYXJlIGhlcmUuXCIsXHJcbiAgICBtZXNzYWdlX2NhcmQ6IFwiVGhpcyBpcyBhIGRpc2NvcmQgbWVzc2FnZS5cIixcclxufVxyXG5cclxuLy8gQ2hhbm5lbHM6XHJcbmNvbnN0IGNoYW5uZWxMaXN0ID0gW1xyXG4gICAge1xyXG4gICAgICAgIGlkOiBcIjcyNzkxMjM4MzgzMzcwMjQxMVwiLFxyXG4gICAgICAgIG5hbWU6IFwiZ2VuZXJhbFwiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBpZDogXCI3OTM0NDgyMjQzNTM1NTAzNDZcIixcclxuICAgICAgICBuYW1lOiBcIm1pbmQtaXMtdHJlZVwiLFxyXG4gICAgfSxcclxuXVxyXG5cclxubGV0IGN1cnJlbnRDaGFubmVsOiB7IGRhdGE/OiBhbnlbXTsgaWQ/OiBzdHJpbmcgfSA9IHt9XHJcbmxldCBsb2FkZWRDaHVua3MgPSAwXHJcbmxldCB6ZW5TdGF0ZTogXCJub25lXCIgfCBcInNpZGViYXJcIiB8IFwiY29udGVudFwiID0gXCJub25lXCJcclxuXHJcbi8qKiBAZGVwcmVjYXRlZCBVc2UgJC5hamF4KCkgZm9yIEhUVFAoUykgcmVxdWVzdHMgKi9cclxuZnVuY3Rpb24gcmVxdWVzdChmaWxlUGF0aDogc3RyaW5nKSB7XHJcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDExMzMyMTMvMTE1MTkzMDJcclxuICAgIHZhciByZXN1bHQgPSBudWxsXHJcbiAgICB2YXIgeG1saHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXHJcbiAgICB4bWxodHRwLm9wZW4oXCJHRVRcIiwgZmlsZVBhdGgsIGZhbHNlKVxyXG4gICAgeG1saHR0cC5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLCBcIlhNTEh0dHBSZXF1ZXN0XCIpXHJcbiAgICB4bWxodHRwLnNlbmQoKVxyXG4gICAgaWYgKHhtbGh0dHAuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHhtbGh0dHAucmVzcG9uc2VUZXh0XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpXHJcbn1cclxuXHJcbi8vIFJlbmRlciBhbiBhcnJheSBvZiBtZXNzYWdlczpcclxuY29uc3QgcmVuZGVyQ29udGVudCA9IGFzeW5jIChtZXNzYWdlczogW10pID0+IHtcclxuICAgIHZhciBjaHVua2VkTWVzc2FnZXMgPSBbXVxyXG4gICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA+PSAxMDApIHtcclxuICAgICAgICAvLyBTcGxpdCB0aGUgYXJyYXkgaW50byBjaHVua3MgaWYgaXQncyBiaWdcclxuICAgICAgICBsZXQgY2h1bmtzID0gTWF0aC5jZWlsKG1lc3NhZ2VzLmxlbmd0aCAvIDEwMClcclxuICAgICAgICB2YXIgaTogbnVtYmVyXHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNodW5rczsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNodW5rZWRNZXNzYWdlcy5wdXNoKG1lc3NhZ2VzLnNsaWNlKGkgKiAxMDAsIGkgKiAxMDAgKyAxMDApKVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgXCJTcGxpdCBcIiArXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5sZW5ndGggK1xyXG4gICAgICAgICAgICAgICAgXCIgbWVzc2FnZXMgaW50byBcIiArXHJcbiAgICAgICAgICAgICAgICBjaHVua2VkTWVzc2FnZXMubGVuZ3RoICtcclxuICAgICAgICAgICAgICAgIFwiIGNodW5rc1wiXHJcbiAgICAgICAgKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBQdXQgdGhlIHdob2xlIHRoaW5nIGludG8gb25lIGNodW5rIGlmIGl0J3Mgbm90IGJpZ1xyXG4gICAgICAgIGNodW5rZWRNZXNzYWdlcyA9IFttZXNzYWdlc11cclxuICAgIH1cclxuICAgIGN1cnJlbnRDaGFubmVsLmRhdGEgPSBjaHVua2VkTWVzc2FnZXNcclxuXHJcbiAgICBsZXQgY3VycmVudENodW5rID0gMFxyXG4gICAgbGV0IGNodW5rXHJcbiAgICBjaHVuayA9IGNodW5rZWRNZXNzYWdlc1tjdXJyZW50Q2h1bmtdXHJcblxyXG4gICAgLy8gUmVuZGVyIHRoZSBmaXJzdCBjaHVuazpcclxuICAgIHJlbmRlckNodW5rKDApXHJcbiAgICAkKFwiI2NoYXRsb2dcIikuc2hvdygpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlck1lc3NhZ2UobXNnOiBtZXNzYWdlLCBjaHVua0VsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBsZXQgbWVzc2FnZUNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIC8vIFByZXBhcmUgdGhlIG5ldyBtc2cgY2FyZFxyXG4gICAgbWVzc2FnZUNhcmQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJtZXNzYWdlLWNhcmRcIilcclxuICAgIG1lc3NhZ2VDYXJkLnNldEF0dHJpYnV0ZShcImlkXCIsIFwibXNnLVwiICsgbXNnLmlkKVxyXG4gICAgbWVzc2FnZUNhcmQuaW5uZXJUZXh0ID0gbXNnLmNvbnRlbnRcclxuICAgIGNodW5rRWxlbWVudC5hcHBlbmRDaGlsZChtZXNzYWdlQ2FyZCkgLy8gQWRkIHRoZSBtc2cgY2FyZCB0byB0aGUgY2hhdGxvZ1xyXG59XHJcblxyXG4vLyBHZXQgYSBzYXZlZCBEaXNjb3JkIGNoYW5uZWwgYW5kIGdpdmUgaXQgdG8gcmVuZGVyQ29udGVudCgpOlxyXG5jb25zdCByZW5kZXJDaGFubmVsID0gYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcclxuICAgICQoXCIjY2hhdGxvZ1wiKSAvLyBSZXNldCB0aGUgY2hhdGxvZyBiZWZvcmUgcmVuZGVyaW5nIHRoZSBuZXcgbWVzc2FnZXNcclxuICAgICAgICAuaHRtbChcIlwiKVxyXG4gICAgICAgIC5zY3JvbGxUb3AoMClcclxuICAgICQoXCJib2R5XCIpLmNzcyhcImN1cnNvclwiLCBcIndhaXRcIilcclxuICAgIGN1cnJlbnRDaGFubmVsLmlkID0gaWRcclxuICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpXHJcbiAgICBjb25zdCBjaGFubmVsRGF0YSA9IGF3YWl0ICQuZ2V0SlNPTihcImFzc2V0cy9cIiArIGlkICsgXCIuanNvblwiKVxyXG4gICAgY29uc3QgZHVyYXRpb24gPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZVxyXG4gICAgY29uc29sZS5sb2coYEdldHRpbmcgYW5kIHBhcnNpbmcgdGhlIEpTT04gdG9vayAke01hdGgucm91bmQoZHVyYXRpb24pfW1zYClcclxuICAgIHJlbmRlckNvbnRlbnQoY2hhbm5lbERhdGEubWVzc2FnZXMpXHJcbiAgICAkKFwiYm9keVwiKS5jc3MoXCJjdXJzb3JcIiwgXCJcIilcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyQ2h1bmsoY2h1bmtJbmRleDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBjaHVuazogQXJyYXk8bWVzc2FnZT4gPSBjdXJyZW50Q2hhbm5lbC5kYXRhW2NodW5rSW5kZXhdXHJcblxyXG4gICAgbGV0IGNodW5rRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgY2h1bmtEaXYuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJjaHVua1wiKVxyXG4gICAgY2h1bmtEaXYuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjaHVuay1cIiArIGNodW5rSW5kZXgpXHJcbiAgICAkKFwiI2NoYXRsb2dcIikuYXBwZW5kKGNodW5rRGl2KVxyXG5cclxuICAgIGxldCBjdXJyZW50TXNnXHJcbiAgICBmb3IgKGN1cnJlbnRNc2cgb2YgY2h1bmspIHtcclxuICAgICAgICAvLyBQYXJzZSBlYWNoIG1lc3NhZ2VcclxuICAgICAgICByZW5kZXJNZXNzYWdlKGN1cnJlbnRNc2csIGNodW5rRGl2KVxyXG4gICAgICAgICQoXCIjcHJvZ3Jlc3NcIikuaHRtbChcIlJlbmRlcmluZyBcIiArIGNodW5rLmxlbmd0aCArIFwiIG1lc3NhZ2VzXCIpXHJcbiAgICB9XHJcbiAgICBsb2FkZWRDaHVua3MgPSBsb2FkZWRDaHVua3MgKyAxXHJcbiAgICBmaXhWaWV3cG9ydCgpXHJcbiAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICBcIkZpbmlzaGVkIHJlbmRlcmluZyBjaHVuayBcIiArXHJcbiAgICAgICAgICAgIGNodW5rSW5kZXggK1xyXG4gICAgICAgICAgICBcIiAoXCIgK1xyXG4gICAgICAgICAgICBjaHVuay5sZW5ndGggK1xyXG4gICAgICAgICAgICBcIiBtZXNzYWdlcylcIlxyXG4gICAgKVxyXG4gICAgJChcIiNwcm9ncmVzc1wiKS5oaWRlKClcclxufVxyXG5cclxuLy8gRml4IGhlaWdodCBvZiBjaGF0bG9nOlxyXG5mdW5jdGlvbiBmaXhWaWV3cG9ydCgpIHtcclxuICAgIC8vbGV0IGNvcnJlY3RIZWlnaHRDaGF0bG9nID0gJChcIiNtYWluLWNvbnRlbnRcIikuaGVpZ2h0KCkgLSAyNVxyXG4gICAgLy8kKFwiI2NoYXRsb2dcIikuY3NzKFwiaGVpZ2h0XCIsIGNvcnJlY3RIZWlnaHRDaGF0bG9nLnRvU3RyaW5nKCkgKyBcInB4XCIpXHJcbiAgICAkKFwiI2xlZnQtbWVudVwiKS5jc3MoXCJoZWlnaHRcIiwgd2luZG93LmlubmVySGVpZ2h0LnRvU3RyaW5nKCkgKyBcInB4XCIpXHJcbiAgICAkKFwiI2NoYXRsb2dcIikuY3NzKFwiaGVpZ2h0XCIsICh3aW5kb3cuaW5uZXJIZWlnaHQgLSA0MCkudG9TdHJpbmcoKSArIFwicHhcIilcclxuICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDYwMCkge1xyXG4gICAgICAgIHplblNpZGViYXIoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB6ZW5Ob25lKClcclxuICAgIH1cclxufVxyXG5cclxuaW1wb3J0IFwiLi9pbmRleC5zY3NzXCJcclxuXHJcbiQoKCkgPT4ge1xyXG4gICAgJCh3aW5kb3cpLm9uKFwicmVzaXplXCIsIGZpeFZpZXdwb3J0KVxyXG4gICAgZml4Vmlld3BvcnQoKVxyXG4gICAgbG9hZFNpZGViYXIoKVxyXG59KVxyXG5cclxuZnVuY3Rpb24gY2hlY2tTdGF0dXNlcygpIHtcclxuICAgIGxldCBkb3duU3RhdHVzZXM6IHN0cmluZ1tdID0gW11cclxuICAgICQuZ2V0SlNPTihcclxuICAgICAgICBcImh0dHBzOi8vcm9ja3ktY2FzdGxlLTU1NjQ3Lmhlcm9rdWFwcC5jb20vaHR0cHM6Ly9zdGF0dXMubW9qYW5nLmNvbS9jaGVja1wiLFxyXG4gICAgICAgIChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhWzBdW1wibWluZWNyYWZ0Lm5ldFwiXSAhPSBcImdyZWVuXCIpIHtcclxuICAgICAgICAgICAgICAgIGRvd25TdGF0dXNlcy5wdXNoKFwibWluZWNyYWZ0Lm5ldFwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkYXRhWzFdW1wic2Vzc2lvbi5taW5lY3JhZnQubmV0XCJdICE9IFwiZ3JlZW5cIikge1xyXG4gICAgICAgICAgICAgICAgZG93blN0YXR1c2VzLnB1c2goXCJzZXNzaW9uLm1pbmVjcmFmdC5uZXRcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0YVsyXVtcImFjY291bnQubW9qYW5nLmNvbVwiXSAhPSBcImdyZWVuXCIpIHtcclxuICAgICAgICAgICAgICAgIGRvd25TdGF0dXNlcy5wdXNoKFwiYWNjb3VudC5tb2phbmcuY29tXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRhdGFbM11bXCJhdXRoc2VydmVyLm1vamFuZy5jb21cIl0gIT0gXCJncmVlblwiKSB7XHJcbiAgICAgICAgICAgICAgICBkb3duU3RhdHVzZXMucHVzaChcImF1dGhzZXJ2ZXIubW9qYW5nLmNvbVwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkYXRhWzVdW1wiYXBpLm1vamFuZy5jb21cIl0gIT0gXCJncmVlblwiKSB7XHJcbiAgICAgICAgICAgICAgICBkb3duU3RhdHVzZXMucHVzaChcImFwaS5tb2phbmcuY29tXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRhdGFbNl1bXCJ0ZXh0dXJlcy5taW5lY3JhZnQubmV0XCJdICE9IFwiZ3JlZW5cIikge1xyXG4gICAgICAgICAgICAgICAgZG93blN0YXR1c2VzLnB1c2goXCJ0ZXh0dXJlcy5taW5lY3JhZnQubmV0XCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRhdGFbN11bXCJtb2phbmcuY29tXCJdICE9IFwiZ3JlZW5cIikge1xyXG4gICAgICAgICAgICAgICAgZG93blN0YXR1c2VzLnB1c2goXCJtb2phbmcuY29tXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApXHJcblxyXG4gICAgJC5nZXRKU09OKFxyXG4gICAgICAgIFwiaHR0cHM6Ly9rY3RiaDl2cnRkd2Quc3RhdHVzcGFnZS5pby9hcGkvdjIvc3RhdHVzLmpzb25cIixcclxuICAgICAgICAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXMuaW5kaWNhdG9yID09IFwibWFqb3JcIikge1xyXG4gICAgICAgICAgICAgICAgZG93blN0YXR1c2VzLnB1c2goXCJnaXRodWIuY29tXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApXHJcblxyXG4gICAgJC5nZXRKU09OKFxyXG4gICAgICAgIFwiaHR0cHM6Ly9rY3RiaDl2cnRkd2Quc3RhdHVzcGFnZS5pby9hcGkvdjIvY29tcG9uZW50cy5qc29uXCIsXHJcbiAgICAgICAgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuY29tcG9uZW50c1s4XS5zdGF0dXMgIT0gXCJvcGVyYXRpb25hbFwiKSB7XHJcbiAgICAgICAgICAgICAgICBkb3duU3RhdHVzZXMucHVzaChcImdpdGh1Yi5pb1wiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgKVxyXG5cclxuICAgIHJldHVybiBkb3duU3RhdHVzZXNcclxufVxyXG5cclxuY29uc3Qgc3RhdHVzZXMgPSBjaGVja1N0YXR1c2VzKClcclxuaWYgKHN0YXR1c2VzLmxlbmd0aCAhPSAwKSB7XHJcbiAgICAvKiBNaWdodCBlbmFibGUgdGhpcyBsYXRlclxyXG4gICAgbGV0IGlcclxuICAgIGZvciAoaSBvZiBzdGF0dXNlcykge1xyXG4gICAgICAgIGlmIChpID09IFwiZ2l0aHViLmlvXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICAgICAgXCJHaXRodWIgUGFnZXMgaXMgcmVwb3J0aW5nIHJlZHVjZWQgcGVyZm9ybWFuY2UuIFlvdSBtYXkgZXhwZXJpZW5jZSBzbG93IGxvYWQgdGltZXMgb3Igc2VydmVyIGVycm9ycy5cIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgKi9cclxuICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICBcIk9uZSBvciBtb3JlIHNlcnZpY2VzIGFyZSByZXBvcnRpbmcgZGVncmFkZWQgcGVyZm9ybWFuY2Ugb3IgYW4gb3V0YWdlLlwiLFxyXG4gICAgICAgIHN0YXR1c2VzXHJcbiAgICApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRDaHVuayhjaHVua0luZGV4OiBudW1iZXIpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiTG9hZCBjaHVuayBcIiwgY2h1bmtJbmRleClcclxufVxyXG5cclxuLy8gTGF6eSBsb2FkaW5nIG9mIG1lc3NhZ2UgY2h1bmtzOlxyXG5sZXQgbG9hZGluZ01lc3NhZ2VzID0gZmFsc2VcclxuJChcIiNjaGF0bG9nXCIpLm9uKFwic2Nyb2xsXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChsb2FkZWRDaHVua3MgPj0gY3VycmVudENoYW5uZWwuZGF0YS5sZW5ndGgpIHJldHVyblxyXG4gICAgY29uc3Qgc2Nyb2xsUG9zaXRpb24gPSAkKFwiI2NoYXRsb2dcIikuc2Nyb2xsVG9wKClcclxuICAgIGNvbnN0IGZ1bGxIZWlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoYXRsb2dcIikuc2Nyb2xsSGVpZ2h0XHJcbiAgICBjb25zdCBoZWlnaHQgPSAkKFwiI2NoYXRsb2dcIikuaGVpZ2h0KClcclxuICAgIGNvbnN0IHNjcm9sbFBlcmNlbnQgPSAoc2Nyb2xsUG9zaXRpb24gLyAoZnVsbEhlaWdodCAtIGhlaWdodCkpICogMTAwXHJcblxyXG4gICAgbGV0IHRocmVzaG9sZCA9IDk1XHJcbiAgICBpZiAobG9hZGVkQ2h1bmtzID49IDEwKSB7XHJcbiAgICAgICAgdGhyZXNob2xkID0gOTlcclxuICAgIH0gZWxzZSBpZiAobG9hZGVkQ2h1bmtzID49IDIwKSB7XHJcbiAgICAgICAgdGhyZXNob2xkID0gMTAwXHJcbiAgICB9XHJcbiAgICBpZiAoc2Nyb2xsUGVyY2VudCA+PSA5NSAmJiAhbG9hZGluZ01lc3NhZ2VzKSB7XHJcbiAgICAgICAgbG9hZGluZ01lc3NhZ2VzID0gdHJ1ZVxyXG4gICAgICAgIHJlbmRlckNodW5rKGxvYWRlZENodW5rcylcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgbG9hZGluZ01lc3NhZ2VzID0gZmFsc2VcclxuICAgICAgICB9LCAxMClcclxuICAgIH1cclxufSlcclxuXHJcbmZ1bmN0aW9uIGxvYWRTaWRlYmFyKCkge1xyXG4gICAgLy8gQ3JlYXRlIHRoZSBzaWRlYmFyIGl0ZW1zXHJcbiAgICAkKFwiI2xlZnQtbWVudVwiKS5hcHBlbmQoJCgnPGRpdiBpZD1cImNoYW5uZWxzXCI+PC9kaXY+JykpXHJcbiAgICBmb3IgKGNvbnN0IGNoYW5uZWwgb2YgY2hhbm5lbExpc3QpIHtcclxuICAgICAgICBsZXQgYnV0dG9uID0gJChgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzaWRlYmFyLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiY2hhbm5lbC1sYWJlbFwiIGhyZWY9XCIjXCI+ICR7Y2hhbm5lbC5uYW1lfSA8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGApXHJcbiAgICAgICAgYnV0dG9uWzBdLmRhdGFzZXQuY2hhbm5lbElkID0gY2hhbm5lbC5pZFxyXG4gICAgICAgICQoXCIjY2hhbm5lbHNcIikuYXBwZW5kKGJ1dHRvbilcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgdGhlIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgJChcIi5zaWRlYmFyLWl0ZW1cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoY3R4KSB7XHJcbiAgICAgICAgJChcIi5zaWRlYmFyLWl0ZW1bc2VsZWN0ZWRdXCIpLmF0dHIoXCJzZWxlY3RlZFwiLCBudWxsKVxyXG4gICAgICAgIHJlbmRlckNoYW5uZWwoY3R4LnRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQuY2hhbm5lbElkLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgY3R4LnRhcmdldC5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsIFwiXCIpXHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiB6ZW5TaWRlYmFyKCkge1xyXG4gICAgaWYgKHplblN0YXRlICE9PSBcInNpZGViYXJcIikge1xyXG4gICAgICAgICQoXCIjaW5uZXItYm94XCIpLmNzcyhcImdyaWQtdGVtcGxhdGUtYXJlYXNcIiwgJ1wic2lkZWJhclwiJylcclxuICAgICAgICAkKFwiI2lubmVyLWJveFwiKS5jc3MoXCJncmlkLXRlbXBsYXRlLWNvbHVtbnNcIiwgXCJ1bnNldFwiKVxyXG4gICAgICAgICQoXCIjbWFpbi1jb250ZW50XCIpLmhpZGUoKVxyXG4gICAgICAgICQoXCIjbGVmdC1tZW51XCIpLnNob3coKVxyXG4gICAgICAgIHplblN0YXRlID0gXCJzaWRlYmFyXCJcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gemVuQ29udGVudCgpIHtcclxuICAgIGlmICh6ZW5TdGF0ZSAhPT0gXCJjb250ZW50XCIpIHtcclxuICAgICAgICAkKFwiI2lubmVyLWJveFwiKS5jc3MoXCJncmlkLXRlbXBsYXRlLWFyZWFzXCIsICdcIm1haW5cIicpXHJcbiAgICAgICAgJChcIiNpbm5lci1ib3hcIikuY3NzKFwiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zXCIsIFwidW5zZXRcIilcclxuICAgICAgICAkKFwiI2xlZnQtbWVudVwiKS5oaWRlKClcclxuICAgICAgICAkKFwiI21haW4tY29udGVudFwiKS5zaG93KClcclxuICAgICAgICB6ZW5TdGF0ZSA9IFwiY29udGVudFwiXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHplbk5vbmUoKSB7XHJcbiAgICBpZiAoemVuU3RhdGUgIT09IFwibm9uZVwiKSB7XHJcbiAgICAgICAgJChcIiNpbm5lci1ib3hcIikuY3NzKFwiZ3JpZC10ZW1wbGF0ZS1hcmVhc1wiLCBcIlwiKVxyXG4gICAgICAgICQoXCIjaW5uZXItYm94XCIpLmNzcyhcImdyaWQtdGVtcGxhdGUtY29sdW1uc1wiLCBcIlwiKVxyXG4gICAgICAgICQoXCIjbGVmdC1tZW51XCIpLnNob3coKVxyXG4gICAgICAgICQoXCIjbWFpbi1jb250ZW50XCIpLnNob3coKVxyXG4gICAgICAgIHplblN0YXRlID0gXCJub25lXCJcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9