(()=>{"use strict";var r={394:(r,e,n)=>{n.d(e,{Z:()=>A});var t=n(15),a=n.n(t),o=n(645),i=n.n(o)()(a());i.push([r.id,'.discord-view{--header-primary: #fff;--header-secondary: #b9bbbe;--text-normal: #dcddde;--text-muted: #72767d;--text-link: #00b0f4;--channels-default: #8e9297;--interactive-normal: #b9bbbe;--interactive-hover: #dcddde;--interactive-active: #fff;--interactive-muted: #4f545c;--background-primary: #36393f;--background-secondary: #2f3136;--background-secondary-alt: #292b2f;--background-tertiary: #202225;--background-accent: #4f545c;--background-floating: #18191c;--background-mobile-primary: #36393f;--background-mobile-secondary: #2f3136;--background-modifier-hover: rgba(79, 84, 92, 0.16);--background-modifier-active: rgba(79, 84, 92, 0.24);--background-modifier-selected: rgba(79, 84, 92, 0.32);--background-modifier-accent: hsla(0, 0%, 100%, 0.06);--background-mentioned: rgba(250, 166, 26, 0.05);--background-mentioned-hover: rgba(250, 166, 26, 0.08);--background-message-hover: rgba(4, 4, 5, 0.07);--background-help-warning: rgba(250, 166, 26, 0.1);--background-help-info: rgba(0, 176, 244, 0.1);--scrollbar-thin-thumb: #202225;--scrollbar-thin-track: transparent;--scrollbar-auto-thumb: #202225;--scrollbar-auto-track: #2e3338;--scrollbar-auto-scrollbar-color-thumb: #202225;--scrollbar-auto-scrollbar-color-track: #2f3136;--elevation-stroke: 0 0 0 1px rgba(4, 4, 5, 0.15);--elevation-low: 0 1px 0 rgba(4, 4, 5, 0.2), 0 1.5px 0 rgba(6, 6, 7, 0.05), 0 2px 0 rgba(4, 4, 5, 0.05);--elevation-medium: 0 4px 4px rgba(0, 0, 0, 0.16);--elevation-high: 0 8px 16px rgba(0, 0, 0, 0.24);--logo-primary: #fff;--focus-primary: #00b0f4;--radio-group-dot-foreground: #8ea1e1;--guild-header-text-shadow: 0 1px 1px rgba(0, 0, 0, 0.4);--channeltextarea-background: #40444b;--activity-card-background: #202225;--textbox-markdown-syntax: #8e9297}main{padding-top:64px;padding-left:8px}html,body{height:100%}body{margin:0;font-family:"Roboto",Ubuntu,"Segoe UI",sans-serif}#inner-box{display:grid;grid-template-columns:240px auto;grid-template-areas:"sidebar main";background-color:#36393f;height:100%;width:100%;margin:auto;box-sizing:border-box;border:var(--mdc-theme-primary) solid 5px;border-top:var(--mdc-theme-primary) solid 10px}#app{color:#fff;height:inherit;overflow:hidden;word-wrap:break-word;word-break:break-word}#left-menu{background-color:#2f3136;grid-area:sidebar}#channels .sidebar-item{display:block;color:#8e9297;padding:1px 8px;margin-left:0px;border-radius:4px}#channels .sidebar-item [selected]{background:var(--background-modifier-selected)}#channels .sidebar-item .channel-label{padding:6px 0;cursor:pointer;display:block;color:inherit;text-decoration:none}#channels .sidebar-item:hover{background:rgba(79,84,92,.16)}#channels .sidebar-item:active{background:var(--background-modifier-active)}.primary-box{padding:8px}.card-view .message-card{background-color:#51565f;padding-left:72px;padding-top:.125rem;padding-bottom:.125rem;padding-right:48px;margin:10px 0px;box-shadow:rgba(0,0,0,.12) 2px 2px 3px 2px}.discord-view .message-card{background-color:#36393f;padding-left:72px;padding-top:.125rem;padding-bottom:.125rem;padding-right:48px;margin:10px 0px}#chatlog{padding:5px;padding-right:75px;height:100px;overflow:auto;display:none}#main-content{grid-area:main}#chatlog.fullwidth .message-card{padding-left:10px;padding-right:0}',"",{version:3,sources:["webpack://./discord-explorer/index.scss"],names:[],mappings:"AAAA,cAEI,sBAAA,CACA,2BAAA,CACA,sBAAA,CACA,qBAAA,CACA,oBAAA,CACA,2BAAA,CACA,6BAAA,CACA,4BAAA,CACA,0BAAA,CACA,4BAAA,CACA,6BAAA,CACA,+BAAA,CACA,mCAAA,CACA,8BAAA,CACA,4BAAA,CACA,8BAAA,CACA,oCAAA,CACA,sCAAA,CACA,mDAAA,CACA,oDAAA,CACA,sDAAA,CACA,qDAAA,CACA,gDAAA,CACA,sDAAA,CACA,+CAAA,CACA,kDAAA,CACA,8CAAA,CACA,+BAAA,CACA,mCAAA,CACA,+BAAA,CACA,+BAAA,CACA,+CAAA,CACA,+CAAA,CACA,iDAAA,CACA,uGAAA,CACA,iDAAA,CACA,gDAAA,CACA,oBAAA,CACA,wBAAA,CACA,qCAAA,CACA,wDAAA,CACA,qCAAA,CACA,mCAAA,CACA,kCAAA,CAGJ,KACI,gBAAA,CACA,gBAAA,CAGJ,UAEI,WAAA,CAGJ,KACI,QAAA,CACA,iDAAA,CAGJ,WACI,YAAA,CACA,gCAAA,CACA,kCAAA,CACA,wBAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,yCAAA,CACA,8CAAA,CAGJ,KACI,UAAA,CACA,cAAA,CACA,eAAA,CACA,oBAAA,CACA,qBAAA,CAGJ,WACI,wBAAA,CACA,iBAAA,CAIA,wBACI,aAAA,CACA,aAAA,CACA,eAAA,CACA,eAAA,CACA,iBAAA,CAEA,mCACI,8CAAA,CAGJ,uCACI,aAAA,CACA,cAAA,CACA,aAAA,CACA,aAAA,CACA,oBAAA,CAIR,8BACI,6BAAA,CAGJ,+BACI,4CAAA,CAIR,aACI,WAAA,CAGJ,yBACI,wBAAA,CACA,iBAAA,CACA,mBAAA,CACA,sBAAA,CACA,kBAAA,CACA,eAAA,CACA,0CAAA,CAGJ,4BACI,wBAAA,CACA,iBAAA,CACA,mBAAA,CACA,sBAAA,CACA,kBAAA,CACA,eAAA,CAGJ,SACI,WAAA,CACA,kBAAA,CACA,YAAA,CACA,aAAA,CACA,YAAA,CAGJ,cACI,cAAA,CAGJ,iCACI,iBAAA,CACA,eAAA",sourcesContent:[".discord-view {\r\n    /* Variables pulled directly from Discord source */\r\n    --header-primary: #fff;\r\n    --header-secondary: #b9bbbe;\r\n    --text-normal: #dcddde;\r\n    --text-muted: #72767d;\r\n    --text-link: #00b0f4;\r\n    --channels-default: #8e9297;\r\n    --interactive-normal: #b9bbbe;\r\n    --interactive-hover: #dcddde;\r\n    --interactive-active: #fff;\r\n    --interactive-muted: #4f545c;\r\n    --background-primary: #36393f;\r\n    --background-secondary: #2f3136;\r\n    --background-secondary-alt: #292b2f;\r\n    --background-tertiary: #202225;\r\n    --background-accent: #4f545c;\r\n    --background-floating: #18191c;\r\n    --background-mobile-primary: #36393f;\r\n    --background-mobile-secondary: #2f3136;\r\n    --background-modifier-hover: rgba(79, 84, 92, 0.16);\r\n    --background-modifier-active: rgba(79, 84, 92, 0.24);\r\n    --background-modifier-selected: rgba(79, 84, 92, 0.32);\r\n    --background-modifier-accent: hsla(0, 0%, 100%, 0.06);\r\n    --background-mentioned: rgba(250, 166, 26, 0.05);\r\n    --background-mentioned-hover: rgba(250, 166, 26, 0.08);\r\n    --background-message-hover: rgba(4, 4, 5, 0.07);\r\n    --background-help-warning: rgba(250, 166, 26, 0.1);\r\n    --background-help-info: rgba(0, 176, 244, 0.1);\r\n    --scrollbar-thin-thumb: #202225;\r\n    --scrollbar-thin-track: transparent;\r\n    --scrollbar-auto-thumb: #202225;\r\n    --scrollbar-auto-track: #2e3338;\r\n    --scrollbar-auto-scrollbar-color-thumb: #202225;\r\n    --scrollbar-auto-scrollbar-color-track: #2f3136;\r\n    --elevation-stroke: 0 0 0 1px rgba(4, 4, 5, 0.15);\r\n    --elevation-low: 0 1px 0 rgba(4, 4, 5, 0.2), 0 1.5px 0 rgba(6, 6, 7, 0.05), 0 2px 0 rgba(4, 4, 5, 0.05);\r\n    --elevation-medium: 0 4px 4px rgba(0, 0, 0, 0.16);\r\n    --elevation-high: 0 8px 16px rgba(0, 0, 0, 0.24);\r\n    --logo-primary: #fff;\r\n    --focus-primary: #00b0f4;\r\n    --radio-group-dot-foreground: #8ea1e1;\r\n    --guild-header-text-shadow: 0 1px 1px rgba(0, 0, 0, 0.4);\r\n    --channeltextarea-background: #40444b;\r\n    --activity-card-background: #202225;\r\n    --textbox-markdown-syntax: #8e9297;\r\n}\r\n\r\nmain {\r\n    padding-top: 64px;\r\n    padding-left: 8px;\r\n}\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    font-family: 'Roboto', Ubuntu, 'Segoe UI', sans-serif;\r\n}\r\n\r\n#inner-box {\r\n    display: grid;\r\n    grid-template-columns: 240px auto;\r\n    grid-template-areas: \"sidebar main\";\r\n    background-color: #36393f;\r\n    height: 100%;\r\n    width: 100%;\r\n    margin: auto;\r\n    box-sizing: border-box;\r\n    border: var(--mdc-theme-primary) solid 5px;\r\n    border-top: var(--mdc-theme-primary) solid 10px;\r\n}\r\n\r\n#app {\r\n    color: white;\r\n    height: inherit;\r\n    overflow: hidden;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n}\r\n\r\n#left-menu {\r\n    background-color: #2f3136;\r\n    grid-area: sidebar;\r\n}\r\n\r\n#channels {\r\n    .sidebar-item {\r\n        display: block;\r\n        color: #8e9297;\r\n        padding: 1px 8px;\r\n        margin-left: 0px;\r\n        border-radius: 4px;\r\n\r\n        [selected] {\r\n            background: var(--background-modifier-selected)\r\n        }\r\n\r\n        .channel-label {\r\n            padding: 6px 0;\r\n            cursor: pointer;\r\n            display: block;\r\n            color: inherit;\r\n            text-decoration: none;\r\n        }\r\n    }\r\n\r\n    .sidebar-item:hover {\r\n        background: rgba(79, 84, 92, 0.16);\r\n    }\r\n\r\n    .sidebar-item:active {\r\n        background: var(--background-modifier-active)\r\n    }\r\n}\r\n\r\n.primary-box {\r\n    padding: 8px;\r\n}\r\n\r\n.card-view .message-card {\r\n    background-color: #51565F;\r\n    padding-left: 72px;\r\n    padding-top: .125rem;\r\n    padding-bottom: .125rem;\r\n    padding-right: 48px;\r\n    margin: 10px 0px;\r\n    box-shadow: rgba(0, 0, 0, 0.12) 2px 2px 3px 2px;\r\n}\r\n\r\n.discord-view .message-card {\r\n    background-color: #36393f;\r\n    padding-left: 72px;\r\n    padding-top: .125rem;\r\n    padding-bottom: .125rem;\r\n    padding-right: 48px;\r\n    margin: 10px 0px;\r\n}\r\n\r\n#chatlog {\r\n    padding: 5px;\r\n    padding-right: 75px;\r\n    height: 100px;\r\n    overflow: auto;\r\n    display: none;\r\n}\r\n\r\n#main-content {\r\n    grid-area: main;\r\n}\r\n\r\n#chatlog.fullwidth .message-card {\r\n    padding-left: 10px;\r\n    padding-right: 0;\r\n}"],sourceRoot:""}]);const A=i},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n=r(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(r,n,t){"string"==typeof r&&(r=[[null,r,""]]);var a={};if(t)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var A=0;A<r.length;A++){var c=[].concat(r[A]);t&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:r=>{function e(r,e){(null==e||e>r.length)&&(e=r.length);for(var n=0,t=new Array(e);n<e;n++)t[n]=r[n];return t}r.exports=function(r){var n,t,a=(t=4,function(r){if(Array.isArray(r))return r}(n=r)||function(r,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(r)){var n=[],t=!0,a=!1,o=void 0;try{for(var i,A=r[Symbol.iterator]();!(t=(i=A.next()).done)&&(n.push(i.value),!e||n.length!==e);t=!0);}catch(r){a=!0,o=r}finally{try{t||null==A.return||A.return()}finally{if(a)throw o}}return n}}(n,t)||function(r,n){if(r){if("string"==typeof r)return e(r,n);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?e(r,n):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),d="/*# ".concat(c," */"),s=i.sources.map((function(r){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(r," */")}));return[o].concat(s).concat([d]).join("\n")}return[o].join("\n")}},379:(r,e,n)=>{var t,a=function(){var r={};return function(e){if(void 0===r[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}r[e]=n}return r[e]}}(),o=[];function i(r){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===r){e=n;break}return e}function A(r,e){for(var n={},t=[],a=0;a<r.length;a++){var A=r[a],c=e.base?A[0]+e.base:A[0],d=n[c]||0,s="".concat(c," ").concat(d);n[c]=d+1;var l=i(s),u={css:A[1],media:A[2],sourceMap:A[3]};-1!==l?(o[l].references++,o[l].updater(u)):o.push({identifier:s,updater:b(u,e),references:1}),t.push(s)}return t}function c(r){var e=document.createElement("style"),t=r.attributes||{};if(void 0===t.nonce){var o=n.nc;o&&(t.nonce=o)}if(Object.keys(t).forEach((function(r){e.setAttribute(r,t[r])})),"function"==typeof r.insert)r.insert(e);else{var i=a(r.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var d,s=(d=[],function(r,e){return d[r]=e,d.filter(Boolean).join("\n")});function l(r,e,n,t){var a=n?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(r.styleSheet)r.styleSheet.cssText=s(e,a);else{var o=document.createTextNode(a),i=r.childNodes;i[e]&&r.removeChild(i[e]),i.length?r.insertBefore(o,i[e]):r.appendChild(o)}}function u(r,e,n){var t=n.css,a=n.media,o=n.sourceMap;if(a?r.setAttribute("media",a):r.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}var g=null,p=0;function b(r,e){var n,t,a;if(e.singleton){var o=p++;n=g||(g=c(e)),t=l.bind(null,n,o,!1),a=l.bind(null,n,o,!0)}else n=c(e),t=u.bind(null,n,e),a=function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)};return t(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap)return;t(r=e)}else a()}}r.exports=function(r,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var n=A(r=r||[],e);return function(r){if(r=r||[],"[object Array]"===Object.prototype.toString.call(r)){for(var t=0;t<n.length;t++){var a=i(n[t]);o[a].references--}for(var c=A(r,e),d=0;d<n.length;d++){var s=i(n[d]);0===o[s].references&&(o[s].updater(),o.splice(s,1))}n=c}}}}},e={};function n(t){if(e[t])return e[t].exports;var a=e[t]={id:t,exports:{}};return r[t](a,a.exports,n),a.exports}n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),(()=>{var r=n(379),e=n.n(r),t=n(394);e()(t.Z,{insert:"head",singleton:!1}),t.Z.locals;var a=function(r,e,n,t){return new(n||(n=Promise))((function(a,o){function i(r){try{c(t.next(r))}catch(r){o(r)}}function A(r){try{c(t.throw(r))}catch(r){o(r)}}function c(r){var e;r.done?a(r.value):(e=r.value,e instanceof n?e:new n((function(r){r(e)}))).then(i,A)}c((t=t.apply(r,e||[])).next())}))},o=function(r,e){var n,t,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:A(0),throw:A(1),return:A(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function A(o){return function(A){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,t&&(a=2&o[0]?t.return:o[0]?t.throw||((a=t.return)&&a.call(t),0):t.next)&&!(a=a.call(t,o[1])).done)return a;switch(t=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,t=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=e.call(r,i)}catch(r){o=[6,r],t=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,A])}}},i=[{id:"727912383833702411",name:"general"},{id:"793448224353550346",name:"mind-is-tree"}],A={},c=0,d="none";function s(r){var e,n,t,a=A.data[r],o=document.createElement("div");o.setAttribute("class","chunk"),o.setAttribute("id","chunk-"+r),$("#chatlog").append(o);for(var i=0,d=a;i<d.length;i++)e=d[i],n=o,t=void 0,(t=document.createElement("div")).setAttribute("class","message-card"),t.setAttribute("id","msg-"+e.id),t.innerText=e.content,n.appendChild(t),$("#progress").html("Rendering "+a.length+" messages");c+=1,l(),console.log("Finished rendering chunk "+r+" ("+a.length+" messages)"),$("#progress").hide()}function l(){$("#left-menu").css("height",window.innerHeight.toString()+"px"),$("#chatlog").css("height",(window.innerHeight-40).toString()+"px"),$(window).width()<600?"sidebar"!==d&&($("#inner-box").css("grid-template-areas",'"sidebar"'),$("#inner-box").css("grid-template-columns","unset"),$("#main-content").hide(),$("#left-menu").show(),d="sidebar"):"none"!==d&&($("#inner-box").css("grid-template-areas",""),$("#inner-box").css("grid-template-columns",""),$("#left-menu").show(),$("#main-content").show(),d="none"),$("#main-content").width()<650?$("#chatlog").addClass("fullwidth"):$("#chatlog").removeClass("fullwidth")}$((function(){$(window).on("resize",l),l(),function(){$("#left-menu").append($('<div id="channels"></div>'));for(var r=0,e=i;r<e.length;r++){var n=e[r],t=$('\n            <div class="sidebar-item">\n                <a class="channel-label" href="#"> '+n.name+" </a>\n            </div>\n        ");t[0].dataset.channelId=n.id,$("#channels").append(t)}$(".sidebar-item").on("click",(function(r){var e;$(".sidebar-item[selected]").attr("selected",null),e=r.target.parentElement.dataset.channelId.toString(),a(void 0,void 0,void 0,(function(){var r,n,t;return o(this,(function(i){switch(i.label){case 0:return $("#chatlog").html("").scrollTop(0),$("body").css("cursor","wait"),A.id=e,r=performance.now(),[4,$.getJSON("assets/"+e+".json")];case 1:return n=i.sent(),t=performance.now()-r,console.log("Getting and parsing the JSON took "+Math.round(t)+"ms"),c=n.messages,a(void 0,void 0,void 0,(function(){var r,e,n;return o(this,(function(t){if(r=[],c.length>=100){for(e=Math.ceil(c.length/100),n=0;n<e;n++)r.push(c.slice(100*n,100*n+100));console.log("Split "+c.length+" messages into "+r.length+" chunks")}else r=[c];return A.data=r,r[0],s(0),$("#chatlog").show(),[2]}))})),$("body").css("cursor",""),[2]}var c}))})),r.target.parentElement.setAttribute("selected","")}))}()}));var u,g=(u=[],$.getJSON("https://rocky-castle-55647.herokuapp.com/https://status.mojang.com/check",(function(r){"green"!=r[0]["minecraft.net"]&&u.push("minecraft.net"),"green"!=r[1]["session.minecraft.net"]&&u.push("session.minecraft.net"),"green"!=r[2]["account.mojang.com"]&&u.push("account.mojang.com"),"green"!=r[3]["authserver.mojang.com"]&&u.push("authserver.mojang.com"),"green"!=r[5]["api.mojang.com"]&&u.push("api.mojang.com"),"green"!=r[6]["textures.minecraft.net"]&&u.push("textures.minecraft.net"),"green"!=r[7]["mojang.com"]&&u.push("mojang.com")})),$.getJSON("https://kctbh9vrtdwd.statuspage.io/api/v2/status.json",(function(r){"major"==r.status.indicator&&u.push("github.com")})),$.getJSON("https://kctbh9vrtdwd.statuspage.io/api/v2/components.json",(function(r){"operational"!=r.components[8].status&&u.push("github.io")})),u);0!=g.length&&console.warn("One or more services are reporting degraded performance or an outage.",g);var p=!1;$("#chatlog").on("scroll",(function(){c>=A.data.length||$("#chatlog").scrollTop()/(document.getElementById("chatlog").scrollHeight-$("#chatlog").height())*100>=95&&!p&&(p=!0,s(c),setTimeout((function(){p=!1}),10))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,